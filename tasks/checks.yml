# Copyright 2018-2023 Chris Croome
#
# This file is part of the Webarchitects Apache Ansible role.
#
# The Webarchitects Apache Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects Apache Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects Apache Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check that mistakes haven't been made in the variables and arrays
  block:

    - name: Find the mods available
      ansible.builtin.find:
        paths: /etc/apache2/mods-available
        file_type: file
        use_regex: true
        patterns: '^.*[.]load$'
        recurse: false
      register: apache_mods_available_load

    - name: Debug the mods available find output
      ansible.builtin.debug:
        var: apache_mods_available_load
        verbosity: 2

    - name: Set a fact for the mods available
      ansible.builtin.set_fact:
        # apache_mods_available: "{{ apache_mods_available_load | community.general.json_query('files[].path') | map('basename') | map('regex_replace', '[.]load$') | sort }}"
        apache_mods_available: "{{ apache_mods_available_load | community.general.json_query('files[].path') }}"

    - name: Debug the mods available
      ansible.builtin.debug:
        var: apache_mods_available
        verbosity: 2

    - name: Debug fail
      ansible.builtin.fail:

    - name: Check that at least one module is in apache_mods_enabled and that either mpm_event or mpm_prefork is enabled
      ansible.builtin.assert:
        that:
          - ( apache_mods_enabled is defined ) and ( apache_mods_enabled[0] is defined )
          - ( "mpm_prefork" in apache_mods_enabled ) or ( "mpm_event" in apache_mods_enabled )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Checks when mpm_event enabled
      ansible.builtin.assert:
        that:
          - ( "mpm_prefork" not in apache_mods_enabled )
          - ( "mpm_event" not in apache_mods_disabled )
          - ( "mpm_itk" not in apache_mods_disabled )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( "mpm_event" in apache_mods_enabled )

    - name: Checks when mpm_prefork enabled
      ansible.builtin.assert:
        that:
          - ( "mpm_event" not in apache_mods_enabled )
          - ( "mpm_prefork" not in apache_mods_disabled )
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( "mpm_prefork" in apache_mods_enabled )

    - name: Check that there are no duplicates in the mods arrays
      ansible.builtin.assert:
        that:
          - apache_mods_enabled | unique | count == apache_mods_enabled | count
          - apache_mods_disabled | unique | count == apache_mods_disabled | count
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that there are no duplicates in the conf arrays
      ansible.builtin.assert:
        that:
          - apache_conf_enabled | unique | count == apache_conf_enabled | count
          - apache_conf_disabled | unique | count == apache_conf_disabled | count
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check that there are no duplicates in the sites arrays
      ansible.builtin.assert:
        that:
          - apache_sites_enabled | unique | count == apache_sites_enabled | count
          - apache_sites_disabled | unique | count == apache_sites_disabled | count
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Debug apache_mods_enabled array
      ansible.builtin.debug:
        var: apache_mods_enabled
        verbosity: 2
      when: apache_mods_enabled != []

    - name: Debug apache_mods_disabled array
      ansible.builtin.debug:
        var: apache_mods_disabled
        verbosity: 2
      when: apache_mods_disabled != []

    - name: Check that no mods are enabled and disabled
      ansible.builtin.assert:
        that:
          - apache_mods_enabled | ansible.builtin.intersect(apache_mods_disabled) == []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - apache_mods_enabled != []
        - apache_mods_disabled != []

    - name: Debug apache_conf_enabled arrays
      ansible.builtin.debug:
        var: apache_conf_enabled
        verbosity: 2
      when: apache_conf_enabled != []

    - name: Debug apache_conf_disabled arrays
      ansible.builtin.debug:
        var: apache_conf_disabled
        verbosity: 2
      when: apache_conf_disabled != []

    - name: Check that no conf are enabled and disabled
      ansible.builtin.assert:
        that:
          - apache_conf_enabled | ansible.builtin.intersect(apache_conf_disabled) == []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - apache_conf_enabled != []
        - apache_conf_disabled != []

    - name: Debug apache_sites_enabled arrays
      ansible.builtin.debug:
        var: apache_sites_enabled
        verbosity: 2
      when: apache_sites_enabled != []

    - name: Debug apache_sites_disabled arrays
      ansible.builtin.debug:
        var: apache_sites_disabled
        verbosity: 2
      when: apache_sites_disabled != []

    - name: Check that no sites are enabled and disabled
      ansible.builtin.assert:
        that:
          - apache_sites_enabled | ansible.builtin.intersect(apache_sites_disabled) == []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - apache_sites_enabled != []
        - apache_sites_disabled != []

- name: Check the Apache version, modules and conf, loaded and enabled
  block:

    - name: Debug Apache version
      ansible.builtin.debug:
        var: ansible_local.a2query.version
        verbosity: 1

    - name: TLS versions
      block:

        - name: Set facts for TLS versions
          ansible.builtin.set_fact:
            apache_tls1_3: true
          when: ansible_local.a2query.version is version('2.4.41', '>=')

        - name: Debug TLS 1.3 variable
          ansible.builtin.debug:
            var: apache_tls1_3
            verbosity: 1

      when: ansible_local.a2query.version is ansible.builtin.version('2.4.41', 'ge')

    - name: Check if phpquery is installed
      ansible.builtin.command: which phpquery
      check_mode: false
      changed_when: false
      register: apache_which_phpquery
      failed_when: apache_which_phpquery.rc is not regex('^0|1$')

    - name: Set the apache_php variable to true or false
      ansible.builtin.set_fact:
        apache_php: "{% if apache_which_phpquery.rc == 0 %}true{% else %}false{% endif %}"

    - name: Check PHP version
      block:

        - name: Run phpquery to get the PHP versions
          ansible.builtin.command: phpquery -V
          args:
            strip_empty_ends: true
          check_mode: false
          changed_when: false
          register: apache_phpquery_versions

        - name: Set a fact for the PHP versions
          ansible.builtin.set_fact:
            apache_php_versions: "{{ apache_phpquery_versions.stdout_lines }}"

        - name: Run update-alternatives to find the default version of PHP
          ansible.builtin.command: update-alternatives --query php
          args:
            strip_empty_ends: true
          check_mode: false
          changed_when: false
          register: apache_update_alternatives_query_php

        - name: Set a fact for the default version of PHP
          ansible.builtin.set_fact:
            apache_php_update_alt_q: "{{ apache_update_alternatives_query_php.stdout | string | community.general.jc('update_alt_q') }}"

        - name: Debug PHP update-alternatives --query php | jc --update-alt-q | jp value
          ansible.builtin.debug:
            var: apache_php_update_alt_q.value
            verbosity: 3

        - name: Check if the default version of PHP is a symlink
          ansible.builtin.stat:
            path: "{{ apache_php_update_alt_q.value }}"
          register: apache_php_update_alt_q_value_path

        - name: Debug PHP default version path
          ansible.builtin.debug:
            var: apache_php_update_alt_q_value_path.stat
            verbosity: 3

        - name: Set a fact for the default version of PHP when it is a symlink
          ansible.builtin.set_fact:
            apache_php_version: "{{ apache_php_update_alt_q_value_path.stat.lnk_target | ansible.builtin.regex_replace('^php') }}"
          when: apache_php_update_alt_q_value_path.stat.islnk | bool

        - name: Set a fact for the default version of PHP when it is a not symlink
          ansible.builtin.set_fact:
            apache_php_version: "{{ apache_php_update_alt_q.value | ansible.builtin.regex_replace('^/usr/bin/php') }}"
          when: not apache_php_update_alt_q_value_path.stat.islnk | bool

        - name: A default PHP version is required
          ansible.builtin.assert:
            that:
              - apache_php_version is regex('^[5-9][.][0-9]')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Set facts for the PHP FPM module and conf names
          ansible.builtin.set_fact:
            apache_phpfpm_mod: "php{{ apache_php_version }}"
            apache_phpfpm_conf: "php{{ apache_php_version }}-fpm"

        - name: Debug PHP FPM module and conf names
          ansible.builtin.debug:
            msg:
              - "apache_php_version: {{ apache_php_version }}"
              - "apache_phpfpm_mod: {{ apache_phpfpm_mod }}"
              - "apache_phpfpm_conf: {{ apache_phpfpm_conf }}"
            verbosity: "{% if ansible_check_mode | bool %}0{% else %}1{% endif %}"

      when: ( apache_php is defined ) and ( apache_php | bool )

    - name: Debug the enabled MPM
      ansible.builtin.debug:
        var: ansible_local.a2query.mpm
        verbosity: 2

    - name: "Check if a Let's Encrypt HTTPS cert is present for {{ inventory_hostname }}"
      ansible.builtin.stat:
        path: "/etc/ssl/le/{{ inventory_hostname }}.cert.pem"
      check_mode: false
      register: apache_cert
      when: ( "md" not in apache_mods_enabled )

  tags:
    - apache
...
