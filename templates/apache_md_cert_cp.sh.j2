#!/usr/bin/env bash

set -eE

jc_min_version="1.22.0"

service="{{ apache_md_cert_cp.name }}"
privkey_src="{{ apache_md_cert_cp.privkey.src }}"
privkey_dest="{{ apache_md_cert_cp.privkey.dest }}"
privkey_owner="{{ apache_md_cert_cp.privkey.owner }}"
privkey_group="{{ apache_md_cert_cp.privkey.group }}"
privkey_mode="{{ apache_md_cert_cp.privkey.mode }}"
pubcert_src="{{ apache_md_cert_cp.pubcert.src }}"
pubcert_dest="{{ apache_md_cert_cp.pubcert.dest }}"
pubcert_owner="{{ apache_md_cert_cp.pubcert.owner }}"
pubcert_group="{{ apache_md_cert_cp.pubcert.group }}"
pubcert_mode="{{ apache_md_cert_cp.pubcert.mode }}"

# This script needs to be run as root
if [[ "$(id -u)" != "0" ]] ; then
  echo "The ${0} script can only be run by root"
  exit 1
fi

# Check that jc is available
if ! command -v jc &> /dev/null
then
  echo "jc could not be found"
  exit 1
else
  jc_version=$(jc -v | head -n1 | awk '{ print $3 }')
  if [[ "${jc_version}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    jc_version_check=$(printf "${jc_version}\n${jc_min_version}" | sort -V | head -n1)
    if [[ "${jc_version_check}" != "${jc_min_version}" ]]; then
      echo "jc version ${jc_min_version} is the minimum version required"
      exit 1
    fi
  else
    echo "There was an error parsing jc -v"
    exit 1
  fi
fi


# Check that the server is using UTC
localtime=$(readlink -f /etc/localtime)
tz=$(basename "${localtime}")
if [[ "${tz}" != "UTC" && "${tz}" != "UCT" ]]; then
  echo "The clock needs to be set to UTC"
  exit 1
fi


if ! command -v jp &> /dev/null
then
  echo "jp could not be found"
  exit 1
fi

# Check that jq is available
if ! command -v jq &> /dev/null
then
  echo "jq could not be found"
  exit 1
fi

# Check that openssl is available
if ! command -v openssl &> /dev/null
then
  echo "openssl could not be found"
  exit 1
fi

# Check that the pubcert exists
if [[ ! -f "${pubcert_src}" ]];
then
  echo "No file found at ${pubcert_src}"
  exit 1
else
  # Check that it is a x509 cert
  openssl=$(openssl x509 -noout -text -in "${pubcert_src}" | head -n1)
  if [[ "${openssl}" != "Certificate:" ]]; then
    echo "No certificate found at ${pubcert_src}"
    echo "${openssl}"
    exit 1
  fi
fi

# Check that the privkey exists
if [[ ! -f "${privkey_src}" ]];
then
  echo "No file found at ${privkey_src}"
  exit 1
else
  # Check that it is a key
  openssl=$(openssl ec -noout -text -in "${privkey_src}" 2>/dev/null | head -n1 | awk '{ print $1 }')
  if [[ "${openssl}" != "Private-Key:" ]]; then
    echo "No private key found at ${privkey_src}"
    echo "${openssl}"
    exit 1
  fi
fi

# Get the date the cert was created in UNIX time
created=$(jc -q -m --x509-cert < "${pubcert_src}" | jq -r . | jp -c -u '[].tbs_certificate.validity.not_before | [0]')
# Check that the cert created date is a positive number
if [[ "${created}" == +([0-9]) ]]; then
  # Get the service started date
  started=$(systemctl show "${service}" | jc -q -m --ini | jq -r . | jp -c -u ActiveEnterTimestamp | jc -q -m --date | jq -r . | jp -c -u epoch)
  # Check that the service started date is a positive number
  if [[ "${started}" == +([0-9]) ]]; then
    # Check if the created date is more recent than the started date
    if (( created > started )); then
      # Check that the script is being run by root
      if [[ "$(id -u)" == "0" ]] ; then
        # Copy the pubcert_src
        echo "cp --remove-destination -a ${pubcert_src} ${pubcert_dest}"
        cp --remove-destination -a "${pubcert_src}" "${pubcert_dest}"
        # Chown the pubcert_src
        chown ${pubcert_owner}:${pubcert_group} "${pubcert_dest}"
        # Chmod the pubcert_src
        chmod ${pubcert_mode} "${pubcert_dest}"
        # Copy the privkey_src
        cp --remove-destination -a "${privkey_src}" "${privkey_dest}"
        # Chown the privkey_src
        chown ${privkey_owner}:${privkey_group} "${privcert_dest}"
        # Chmod the privkey_src
        chmod ${privkey_mode} "${privkey_dest}"
        # Restart the service
        service "${service}" restart && echo "${service} restarted for new cert"
      else
        echo "Service ${service} would have been restarted if ${0} was run as root or via sudo"
      fi
    fi
  else
    echo "Error getting the service started date"
    exit 1
  fi
else
  echo "Error getting the certificate created date"
  exit 1
fi

# vim: syntax=bash{# vim: syntax=jinja2 #}
